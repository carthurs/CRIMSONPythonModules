"""
    This file contains code that is intended to generate a script containing the information from the UI
"""

from __future__ import print_function
import json
import datetime

_generatedCodeTemplate = """# Code generated by CRIMSON UI: {}
#----------------------------------------------------------------------------------------------

# this generated code will import this sympy function as a name that can't be easily confused with something else
from sympy import symbols as create_sympy_symbols

NumberOfFluidIterations = {}

Iterations = {}

DiffusionCoefficients = {}

ScalarNames = {}

ReactionCoefficients = {}

# Coefficients
{}

# Scalars
{}

Symbols = {}

# Associate reaction expressions with the scalar they apply to
ReactionExpressions = {}

# End code from UI
#---------------------------------------------------------------------------------------------------"""

def _FormatSpecification(numberOfFluidIterations, iterations, diffusionCoefficients, scalarNames, reactionCoefficients, coefficientSymbolSection, scalarSymbolsSection, symbolsSection, reactionExpressions):
    currentDateAndTime = datetime.datetime.now()
    return _generatedCodeTemplate.format(currentDateAndTime, numberOfFluidIterations, iterations, diffusionCoefficients, scalarNames, reactionCoefficients, coefficientSymbolSection, scalarSymbolsSection, symbolsSection, reactionExpressions)

# Because \t doesn't seem to resolve to '    ', and I really don't want to mix tabs and spaces.
# keep in sync with _ObjectToJSON().
_indentString = '    '

# The only reason I made a function for this is so we can standardize on the format
def _ObjectToJSON(obj):
    return json.dumps(obj, indent=4)

# Where a symbol is a reaction coefficient or scalar.
# Output of this will be, e.g., 
# [
# "k3 = create_sympy_symbols('k3')"
# "k2 = create_sympy_symbols('k2')"
# "k1 = create_sympy_symbols('k1')"
# "k4 = create_sympy_symbols('k4')"
# ]
def _CreateSymbolDefinitionsList(symbols):
    symbolDefinitions = []

    for symbolName in symbols:
        symbolDefinitionTemplate = "{} = create_sympy_symbols('{}')"
        definitionLine = symbolDefinitionTemplate.format(symbolName, symbolName)
        symbolDefinitions.append(definitionLine)

    return symbolDefinitions

# Where a symbol is a reaction coefficient or scalar.
# Output of this will be, e.g., 
# """
# k3 = create_sympy_symbols('k3')
# k2 = create_sympy_symbols('k2')
# k1 = create_sympy_symbols('k1')
# k4 = create_sympy_symbols('k4')
# """
def _CreateSymbolDefinitionSection(symbols):
    definitions = _CreateSymbolDefinitionsList(symbols)

    # Do not wrap in a list, each symbol is a Python variable.
    definitionsString = ''
    
    for definition in definitions:
        definitionsString += definition
        definitionsString += '\n'

    return definitionsString



def _NewlineDelimitEntries(stringList):
    resultingString = ''

    for entryIndex in range(len(stringList)):
        if(entryIndex != 0):
            resultingString += ','
            resultingString += '\n'
        
        entryString = stringList[entryIndex]
        resultingString += entryString


    return resultingString


# Output of this will be, e.g.,:
#   """{
#       "I":    k1*II**2*I**2,
#       "II":   II**4*III*k3,
#       "III":  k2*II**3*I**4 + k1*I**2*III**2,
#       "IV":   k4,
#       "V":    k3*III**2*V
#   }
#   """
def _FormatReactionExpressionsLiteral(reactionExpressionsDict):
    # Note that it isn't as simple as just JSON string-ing, because the reaction expression *must not* be quoted,
    # but the scalar symbol must be quoted.
    reactionExpressionTemplate = "{}'{}':{}"

    reactionExpressionEntries = []
    for scalarSymbol in reactionExpressionsDict:
        reactionExpression = reactionExpressionsDict[scalarSymbol]
        reactionExpressionEntry = reactionExpressionTemplate.format(_indentString, scalarSymbol, reactionExpression)

        reactionExpressionEntries.append(reactionExpressionEntry)

    reactionEntriesString = _NewlineDelimitEntries(reactionExpressionEntries)

    # str.format does not seem to like stuff like '{ {} }'
    reactionExpressionsLiteral = '{\n'
    reactionExpressionsLiteral += reactionEntriesString
    reactionExpressionsLiteral += '\n}'

    return reactionExpressionsLiteral

def _FormatSymbolsSection(symbolNamesList):
    symbolEntryTemplate = "{}'{}':{}"

    symbolEntries = []
    for symbolName in symbolNamesList:
        symbolString = symbolEntryTemplate.format(_indentString, symbolName, symbolName)
        symbolEntries.append(symbolString)
    
    symbolEntriesString = _NewlineDelimitEntries(symbolEntries)

    symbolExpressionsLiteral = '{\n'
    symbolExpressionsLiteral += symbolEntriesString
    symbolExpressionsLiteral += '\n}'

    return symbolExpressionsLiteral


def GenerateSpecification(fluidIterationsCount, scalarIterations, diffusionCoefficientsDict, scalarSymbolsList, reactionCoefficientsDict, reactionStringsDict):
    iterationsLiteral = _ObjectToJSON(scalarIterations)
    diffusionCoefficientsLiteral = _ObjectToJSON(diffusionCoefficientsDict)
    scalarNamesLiteral = _ObjectToJSON(scalarSymbolsList)
    reactionCoefficientsLiteral = _ObjectToJSON(reactionCoefficientsDict)

    coefficientsDefinitions = _CreateSymbolDefinitionSection(reactionCoefficientsDict)
    scalarsDefinitions = _CreateSymbolDefinitionSection(scalarSymbolsList)

    symbolNames = []
    for scalarName in scalarSymbolsList:
        symbolNames.append(scalarName)
    
    for reactionCoefficientName in reactionCoefficientsDict:
        symbolNames.append(reactionCoefficientName)

    symbolNamesLiteral = _FormatSymbolsSection(symbolNames)

    reactionExpressionsLiteral = _FormatReactionExpressionsLiteral(reactionStringsDict)

    # The number of fluid iterations is the number of update/solve steps, so that means it's double what was entered into the UI.
    # Also remember that this is 0 based
    numberOfFluidIterations = fluidIterationsCount * 2

    return _FormatSpecification(numberOfFluidIterations, iterationsLiteral, diffusionCoefficientsLiteral, scalarNamesLiteral, reactionCoefficientsLiteral, coefficientsDefinitions, scalarsDefinitions, symbolNamesLiteral, reactionExpressionsLiteral)


    